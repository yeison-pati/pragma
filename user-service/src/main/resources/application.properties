# ===================================================================
# COMMON APPLICATION PROPERTIES
# ===================================================================

# Service Discovery
spring.application.name=user-service

# Server Port
server.port=${SERVER_PORT:8081}

# ===================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# ===================================================================

spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:postgres}:${POSTGRES_PORT:5432}/${POSTGRES_DB:interview_project_db}
spring.datasource.username=${POSTGRES_USERNAME:user}
spring.datasource.password=${POSTGRES_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# ===================================================================
# JPA & HIBERNATE CONFIGURATION
# ===================================================================

# Strategy for creating or updating the database schema.
# 'update': updates the schema if it has changed, creates it if it doesn't exist.
# 'validate': validates the schema, makes no changes to the database.
# 'create': creates the schema, destroying previous data.
# 'create-drop': creates the schema and destroys it when the session factory is closed.
# 'none': does nothing.
spring.jpa.hibernate.ddl-auto=update

# Show SQL statements in the logs. Useful for debugging.
spring.jpa.show-sql=true

# Hibernate dialect for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# ===================================================================
# KAFKA PRODUCER CONFIGURATION
# ===================================================================

# Kafka bootstrap servers
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}

# Name of the topic to which user events will be published
spring.kafka.topic.name=${SPRING_KAFKA_TOPIC_NAME:user-events-topic}

# Serializer for the message key (user ID as a String)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Serializer for the message value (UserCreatedEvent object as JSON)
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


# ===================================================================
# CACHING CONFIGURATION (Redis)
# ===================================================================

# Tell Spring Boot to use Redis for caching
spring.cache.type=redis

# Connection details for Redis
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT:6379}

# Default Time-To-Live (TTL) for all cache entries created by this service
spring.cache.redis.time-to-live=${SPRING_CACHE_REDIS_TIME_TO_LIVE:600000}

# Prefix for all keys related to this application
spring.cache.redis.key-prefix=${SPRING_CACHE_REDIS_KEY_PREFIX:user-service::}


# ===================================================================
# LOGGING
# ===================================================================

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ===================================================================
# JWT SECURITY CONFIGURATION
# ===================================================================
# JWT secret - will be overridden by environment variables in production
application.security.jwt.secret-key=${APPLICATION_SECURITY_JWT_SECRET_KEY:DefaultSecretKeyForLocalDevelopmentOnly}
# Token validity in milliseconds. 86400000 ms = 24 hours.
application.security.jwt.expiration=86400000
