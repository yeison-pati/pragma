# ===================================================================
# COMMON APPLICATION PROPERTIES
# ===================================================================

# Service Discovery
spring.application.name=order-service

# Server Port
# Each microservice will run on a different port to avoid conflicts.
server.port=8082


# ===================================================================
# DATABASE CONFIGURATION (MongoDB)
# ===================================================================

# The 'mongo' hostname will refer to the service name in docker-compose.yml.
# Docker's internal DNS will resolve this to the correct container IP.
# The 'orders_db' is the name of the database to be used in MongoDB.
spring.data.mongodb.uri=mongodb://mongo:27017/orders_db


# ===================================================================
# KAFKA CONSUMER CONFIGURATION
# ===================================================================

# Name of the topic from which to consume user events
spring.kafka.topic.name=user-events-topic

# Unique ID for the consumer group. All instances of order-service will belong to this group.
spring.kafka.consumer.group-id=order-service-group

# Deserializer for the message key (String)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Deserializer for the message value (JSON to UserCreatedEvent)
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# When using JsonDeserializer, you must configure it to trust the package
# of the class you want to deserialize into. '*' is a wildcard for all packages,
# which is convenient for development but can be narrowed for production.
spring.kafka.consumer.properties.spring.json.trusted.packages=*


# ===================================================================
# CACHING CONFIGURATION (Redis)
# ===================================================================

# Tell Spring Boot to use Redis for caching
spring.cache.type=redis

# Connection details for Redis.
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Default Time-To-Live (TTL) for all cache entries created by this service.
spring.cache.redis.time-to-live=10m

# Use a unique prefix for this service to avoid key collisions in Redis.
spring.cache.redis.key-prefix=order-service::

# ===================================================================
# JWT SECURITY CONFIGURATION
# ===================================================================
# IMPORTANT: In a real production environment, this secret key MUST be externalized
# and should NOT be in version control. Use environment variables or a secret manager.
# This key MUST be identical to the one used in the user-service.
application.security.jwt.secret-key=DefaultSecretKeyNeedsToBeChangedAndMadeMuchLongerForProduction
# Token validity in milliseconds. This should match the expiration in user-service.
# 86400000 ms = 24 hours.
application.security.jwt.expiration=86400000
