name: Deploy Microservices to ECS

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  build-and-deploy:
    name: "Build Images and Deploy Infrastructure"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Build and push user-service image"
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest ./user-service
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      - name: "Build and push order-service image"
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service:latest ./order-service
          docker push ${{ secrets.DOCKER_USERNAME }}/order-service:latest

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform -chdir=infrastructure init

      - name: "Terraform Plan"
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_postgres_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_postgres_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_mongodb_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_mongodb_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
          TF_VAR_redis_host: ${{ secrets.REDIS_HOST || 'redis' }}
          TF_VAR_redis_port: ${{ secrets.REDIS_PORT || '6379' }}
          TF_VAR_kafka_host: ${{ secrets.KAFKA_HOST || 'kafka' }}
          TF_VAR_kafka_port: ${{ secrets.KAFKA_PORT || '9092' }}
          TF_VAR_mongodb_host: ${{ secrets.MONGODB_HOST || 'mongodb' }}
          TF_VAR_mongodb_port: ${{ secrets.MONGODB_PORT || '27017' }}
        run: terraform -chdir=infrastructure plan

      - name: "Terraform Apply"
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_postgres_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_postgres_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_mongodb_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_mongodb_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
          TF_VAR_redis_host: ${{ secrets.REDIS_HOST || 'redis' }}
          TF_VAR_redis_port: ${{ secrets.REDIS_PORT || '6379' }}
          TF_VAR_kafka_host: ${{ secrets.KAFKA_HOST || 'kafka' }}
          TF_VAR_kafka_port: ${{ secrets.KAFKA_PORT || '9092' }}
          TF_VAR_mongodb_host: ${{ secrets.MONGODB_HOST || 'mongodb' }}
          TF_VAR_mongodb_port: ${{ secrets.MONGODB_PORT || '27017' }}
        run: terraform -chdir=infrastructure apply -auto-approve

      - name: "Get Application URLs"
        run: |
          echo "ðŸš€ Deployment Complete!"
          echo "User Service: $(terraform -chdir=infrastructure output -raw user_service_url)"
          echo "Order Service: $(terraform -chdir=infrastructure output -raw order_service_url)"
          echo "Application URL: $(terraform -chdir=infrastructure output -raw application_url)"

  cleanup-on-failure:
    name: "Cleanup Infrastructure on Failure"
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure()
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform -chdir=infrastructure init

      - name: "Terraform Destroy"
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_postgres_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_postgres_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_mongodb_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_mongodb_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          echo "ðŸ§¹ Cleaning up failed infrastructure..."
          terraform -chdir=infrastructure destroy -auto-approve
          echo "âœ… Cleanup completed"